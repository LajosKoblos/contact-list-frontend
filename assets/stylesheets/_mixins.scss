/* CROSS BROWSER MIXINS */

@mixin transition($property, $time) {
	-webkit-transition: $property, $time;
	-moz-transition: $property, $time;
	-ms-transition: $property, $time;
	-o-transition: $property, $time;
	transition: $property, $time;
}
@mixin transitions($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

@mixin border-radius($border-radius) {
	-webkit-border-radius: $border-radius;
	-moz-border-radius: $border-radius;
	-ms-border-radius: $border-radius;
	-o-border-radius: $border-radius;
	border-radius: $border-radius;
}

@mixin border-bottom-radius($border-radius) {
	-webkit-border-bottom-left-radius: $border-radius;
	-moz-border-bottom-left-radius: $border-radius;
	-ms-border-bottom-left-radius: $border-radius;
	-o-border-bottom-left-radius: $border-radius;
	border-bottom-left-radius: $border-radius;
	-webkit-border-bottom-right-radius: $border-radius;
	-moz-border-bottom-right-radius: $border-radius;
	-ms-border-bottom-right-radius: $border-radius;
	-o-border-bottom-right-radius: $border-radius;
	border-bottom-right-radius: $border-radius;
}

@mixin opacity($trans) {
	filter: alpha(opactiy=($trans * 100));
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
	-moz-opacity: $trans;
	-khtml-opacity: $trans;
	opacity: $trans;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
	@if $inset {
		-webkit-box-shadow:inset $top $left $blur $color;
		-moz-box-shadow:inset $top $left $blur $color;
		box-shadow:inset $top $left $blur $color;
	} @else {
		-webkit-box-shadow: $top $left $blur $color;
		-moz-box-shadow: $top $left $blur $color;
		box-shadow: $top $left $blur $color;
	}
}

@mixin drop-shadow($x, $y, $spread, $color) {
	-webkit-filter: drop-shadow($x $y $spread $color);
	filter: drop-shadow($x $y $spread $color);
}

@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
	transform: $transforms;
}

@mixin transform-origin($origin) {
	moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin rotate($deg) {
	@include transform(rotate(#{$deg}deg));
}

@mixin scale($scaleX, $scaleY) {
	@include transform(scale($scaleX, $scaleY));
}

@mixin translate($x, $y) {
	@include transform(translate($x, $y));
}

@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin background-gradient($startcolor, $endcolor, $orientation) {
		background: $startcolor;
		@if $orientation == vertical {
		// vertical
			background: -moz-linear-gradient(top,  $startcolor 0%, $endcolor 100%);
			background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
			background: -webkit-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
			background: -o-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
			background: -ms-linear-gradient(top,  $startcolor 0%,$endcolor 100%);
			background: linear-gradient(to bottom,  $startcolor 0%,$endcolor 100%);
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=0 );
		}
		@else if $orientation == horizontal
		{
		// horizontal
			background: -moz-linear-gradient(left,  $startcolor 0%, $endcolor 100%);
			background: -webkit-gradient(linear, left top, right top, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
			background: -webkit-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
			background: -o-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
			background: -ms-linear-gradient(left,  $startcolor 0%,$endcolor 100%);
			background: linear-gradient(to right,  $startcolor 0%,$endcolor 100%);
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
		}
		@else
		{
		// radial
			background: -moz-radial-gradient(center, ellipse cover,  $startcolor 0%, $endcolor 100%);
			background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$startcolor), color-stop(100%,$endcolor));
			background: -webkit-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
			background: -o-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
			background: -ms-radial-gradient(center, ellipse cover,  $startcolor 0%,$endcolor 100%);
			background: radial-gradient(ellipse at center,  $startcolor 0%,$endcolor 100%);
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$startcolor', endColorstr='$endcolor',GradientType=1 );
		}
}

@mixin blur($radius) {
	-webkit-filter: blur($radius);
	-moz-filter: blur($radius);
	-o-filter: blur($radius);
	-ms-filter: blur($radius);
	filter: blur($radius);
}

@mixin background-size($dimension) {
		 -moz-background-size: $dimension;
	-webkit-background-size: $dimension;
					background-size: $dimension;
}

@mixin border-radius-separate($topLeftRadius, $topRightRadius, $bottomLeftRadius, $bottomRightRadius) {
	-webkit-border-top-left-radius: $topLeftRadius;
	-webkit-border-top-right-radius: $topRightRadius;
	-webkit-border-bottom-right-radius: $bottomRightRadius;
	-webkit-border-bottom-left-radius: $bottomLeftRadius;

	-moz-border-radius-topleft: $topLeftRadius;
	-moz-border-radius-topright: $topRightRadius;
	-moz-border-radius-bottomright: $bottomRightRadius;
	-moz-border-radius-bottomleft: $bottomLeftRadius;

	border-top-left-radius: $topLeftRadius;
	border-top-right-radius: $topRightRadius;
	border-bottom-right-radius: $bottomRightRadius;
	border-bottom-left-radius: $bottomLeftRadius;
}

@mixin placeholder {
	::-webkit-input-placeholder {@content}
	:-moz-placeholder           {@content}
	::-moz-placeholder          {@content}
	:-ms-input-placeholder      {@content}  
}

/* BOX SIZING */

@mixin box-sizing($type) {
	-webkit-box-sizing:$type;
	-moz-box-sizing:$type;
	box-sizing:$type;
}

@mixin keyframes($animationName) {
	@-webkit-keyframes #{$animationName} {
		@content;
	}
	@-moz-keyframes #{$animationName} {
		@content;
	}
	@-o-keyframes #{$animationName} {
		@content;
	}
	@keyframes #{$animationName} {
		@content;
	}
}

/* ANIMATION */

@mixin animation($animate...) {
	$max: length($animate);
	$animations: '';

	@for $i from 1 through $max {
		$animations: #{$animations + nth($animate, $i)};

		@if $i < $max {
			$animations: #{$animations + ", "};
		}
	}

	-webkit-animation: $animations;
	-moz-animation:    $animations;
	-o-animation:      $animations;
	animation:         $animations;
}

/* POSITION */
@mixin center-both {
	position: absolute;
	top: 50%;
	left: 50%;
	@include translate(-50%, -50%);
}

@mixin center-both-with-offset($offsetX, $offsetY) {
	position: absolute;
	top: 50%;
	left: 50%;
	@include translate(-50% + $offsetX, -50% + $offsetY);
}

@mixin center-horizontally {
	position: absolute;
	left: 50%;
	@include translate(-50%, 0);
}

@mixin center-horizontally-with-offset($offset) {
	position: absolute;
	left: 50%;
	@include translate(-50% + $offset, 0);
}

@mixin center-vertically {
	position: absolute;
	top: 50%;
	@include translate(0, -50%);
}

@mixin center-vertically-with-offset($offset) {
	position: absolute;
	top: 50%;
	@include translate(0, -50% + $offset);
}

@mixin clearfix {
	content: '';
	display: block;
	clear: both;
}